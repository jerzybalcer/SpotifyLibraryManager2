// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotifyLibraryManager.Database;

#nullable disable

namespace SpotifyLibraryManager.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20220613210307_ManyToManyFix")]
    partial class ManyToManyFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.Property<int>("AlbumsAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistsArtistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlbumsAlbumId", "ArtistsArtistId");

                    b.HasIndex("ArtistsArtistId");

                    b.ToTable("AlbumArtist");
                });

            modelBuilder.Entity("AlbumTag", b =>
                {
                    b.Property<int>("AlbumsAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlbumsAlbumId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("AlbumTag");
                });

            modelBuilder.Entity("SpotifyLibraryManager.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LikeDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpotifyUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlbumId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SpotifyLibraryManager.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SpotifyLibraryManager.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.HasOne("SpotifyLibraryManager.Models.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyLibraryManager.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumTag", b =>
                {
                    b.HasOne("SpotifyLibraryManager.Models.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyLibraryManager.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
